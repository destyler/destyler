---
import { getAccessibilityDoc, type AccessibilityEntry } from '@destyler/docs'

const { name } = Astro.props

// We now derive keyboard (accessibility) information directly from @destyler/docs
let accessibilityEntries: AccessibilityEntry[] = []
try {
  accessibilityEntries = getAccessibilityDoc(name as any)
} catch (error) {
  // Component name might not exist in docs; log for debugging but fail gracefully in UI
  console.error(`No accessibility (keyboard) data found for "${name}":`, error)
}

interface KeyboardProps {
  name: string
  desc: string
}

// Normalize to the previous expected shape (name/desc) so the template stays almost unchanged
const matchContext: KeyboardProps[] = accessibilityEntries.map(item => ({
  name: item.key,
  desc: item.description,
}))

const hasData = matchContext.length > 0
---

{hasData ? (
  <div class="w-full overflow-hidden mt-6 border border-border rounded-md">
    <div class="grid grid-cols-3 bg-background! mt-0!">
      <div class="col-span-1 py-3 px-4 font-medium text-left border-b border-b-border mt-0!">
        name
      </div>
      <div class="col-span-2 py-3 px-4 font-medium text-left border-b border-b-border border-l border-l-border mt-0!">
        desc
      </div>
    </div>
    <div class="w-full mt-0!">
      {matchContext.map((item) => (
        <div class="grid mt-0! grid-cols-3 border-b border-border last:border-0 hover:bg-muted/50 transition-colors">
          <div class="col-span-1 py-3 px-4 font-mono text-sm mt-0!">
            <code class="bg-muted/50 px-1.5 py-0.5 rounded break-all">{item.name}</code>
          </div>
          <div class="col-span-2 py-3 px-4 border-l border-l-border mt-0!">
            {item.desc}
          </div>
        </div>
      ))}
    </div>
  </div>
) : (
  <p class="text-muted-foreground mt-4">No keyboard accessibility data found for "{name}"</p>
)}
