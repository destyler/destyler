---
import SinppetsVue from '../snippets/Sinppets.vue'
import SinppetsReact from '../snippets/Sinppets.react'
import SinppetsSolid from '../snippets/Sinppets.solid'
import SinppetsSvelte from '../snippets/Sinppets.svelte'
import Preview from './Preview.astro'
import FrameworkLayout from './FrameworkLayout.astro'
import CodeGroup from './preview/CodeGroup.vue'
import { createHighlighter } from 'shiki'

const { name } = Astro.props

// 将 kebab-case 名称转换为 PascalCase，用于匹配文件名
const toPascalCase = (str: string) => str.split(/[-_]/).map(s => s.charAt(0).toUpperCase() + s.slice(1)).join('')
const baseName = toPascalCase(name)

// 高亮器（重复创建成本较大，复用单实例）
const highlighter = await createHighlighter({
  themes: ['vitesse-light','vitesse-dark'],
  langs: ['html', 'css', 'js', 'ts', 'vue', 'jsx', 'tsx', 'svelte']
})

interface CodeFile {
  title: string;
  content: string;
  highlighted: string;
  language: string;
  framework: string
}

// 清理不需要展示的指令 / 引入
const sanitize = (code: string) => {
  return code
    // 去掉 solid-js jsxImportSource 注释
    .replace(/\/\*+\s*@jsxImportSource\s+solid-js\s*\*+\//g, '')
    // 去掉 import '../../style.css'
    .replace(/import\s+['\"]\.\/style\.css['\"];?\n?/g, '')
    // 删除开头空行
    .replace(/^(\s*\n)+/, '')
    // 折叠 3 行及以上连续空行
    .replace(/\n{3,}/g, '\n\n')
}

// 预先静态收集 snippets 下所有相关文件（递归，以支持 menu 等存在多级子目录的组件变体）
// 示例：packages/components/menu/snippets/menu/Menu.vue 或 packages/components/menu/snippets/content-menu/ContentMenu.vue
const allSnippets = import.meta.glob('@component/*/snippets/**/*', { query: '?raw', import: 'default' })

const loadFrameworkFile = async (framework: string) => {
  const allFiles: Record<string, () => Promise<any>> = allSnippets
  const snippetPaths = Object.keys(allFiles)

  // 判定是否是“简单组件”还是“变体组件”调用
  // 简单：/components/<name>/snippets/<PascalName>.vue 存在
  const directPattern = new RegExp(`/components/${name}/snippets/${baseName}\\.`)
  const hasDirect = snippetPaths.some(p => directPattern.test(p))

  let rootComponentDir = name
  let variantDir: string | null = null

  if (!hasDirect) {
    // 寻找形如 /components/<root>/snippets/<name>/ 的路径 => 说明 name 是一个变体
    const variantMatch = snippetPaths.find(p => p.includes(`/snippets/${name}/`))
    if (variantMatch) {
      const segments = variantMatch.split('/')
      const compIdx = segments.findIndex(s => s === 'components')
      if (compIdx !== -1 && segments.length > compIdx + 2) {
        rootComponentDir = segments[compIdx + 1] // 根组件目录
        // name 已是变体目录（kebab-case）
        variantDir = name
      }
    }
  }

  // 期望主文件集合（按当前 framework）
  const expectedFiles: string[] = []
  if (framework === 'vue') expectedFiles.push(`${baseName}.vue`)
  else if (framework === 'react') expectedFiles.push(`${baseName}.react.tsx`, `${baseName}.react.jsx`, `${baseName}.react.ts`, `${baseName}.react.js`)
  else if (framework === 'solid') expectedFiles.push(`${baseName}.solid.tsx`, `${baseName}.solid.ts`)
  else if (framework === 'svelte') expectedFiles.push(`${baseName}.svelte`)

  const result: CodeFile[] = []

  // 匹配路径规则：
  // 1) 简单组件：/components/<name>/snippets/<File>
  // 2) 变体组件：/components/<rootComponentDir>/snippets/<variantDir>/<File>
  const pathFilter = (p: string) => {
    if (variantDir) {
      return p.includes(`/components/${rootComponentDir}/snippets/${variantDir}/`)
    }
    return p.includes(`/components/${rootComponentDir}/snippets/`) && !/\/snippets\/[^/]+\//.test(p.replace(`/components/${rootComponentDir}/snippets/`, ''))
  }

  for (const [path, importer] of Object.entries(allFiles)) {
    if (!pathFilter(path)) continue

    const segments = path.split('/')
    const fileName = segments.pop() || ''

    // 忽略样式 & api 辅助文件
    if (fileName === 'style.css' || fileName === 'api.ts' || fileName === 'api.js') continue

    if (!expectedFiles.includes(fileName)) continue

    try {
      const raw = await importer()
      const cleaned = sanitize(raw)
      const ext = fileName.split('.').pop() || ''
      let language = ext
      if (fileName.endsWith('.react.tsx') || fileName.endsWith('.solid.tsx')) language = 'tsx'
      else if (fileName.endsWith('.react.jsx')) language = 'jsx'
      else if (fileName.endsWith('.react.ts')) language = 'ts'
      else if (fileName.endsWith('.react.js')) language = 'js'
      else if (ext === 'vue') language = 'vue'
      else if (ext === 'svelte') language = 'svelte'

      const highlighted = highlighter.codeToHtml(cleaned, {
        lang: language,
        theme: 'vitesse-dark',
        themes: { dark: 'vitesse-dark', light: 'vitesse-light' }
      })

      let frameworkName = ''
      if (fileName.endsWith('.vue')) frameworkName = 'vue'
      else if (/\.react\.(t|j)sx?$/.test(fileName)) frameworkName = 'react'
      else if (/\.solid\.(t|j)sx?$/.test(fileName)) frameworkName = 'solid'
      else if (fileName.endsWith('.svelte')) frameworkName = 'svelte'

      result.push({ title: fileName, content: cleaned, highlighted, language, framework: frameworkName })
    } catch (e) {
      console.error(`Failed to load file ${path}`, e)
    }
  }

  return result
}

const frameworks = ['vue', 'react', 'solid', 'svelte']
// 与 CodeGroup 期望的结构匹配
const codeFiles: Record<string, { code: CodeFile[] }> = {}

for (const fw of frameworks) {
  codeFiles[fw] = { code: await loadFrameworkFile(fw) }
}

// 释放高亮器（如果后续页面交互不需要动态生成，可直接释放）
highlighter.dispose()
---

<Preview mode="code">
  <FrameworkLayout>
    <div slot="vue">
      <SinppetsVue name={name} client:idle />
    </div>
    <div slot="react">
      <SinppetsReact name={name} client:idle />
    </div>
    <div slot="solid">
      <SinppetsSolid name={name} client:idle />
    </div>
    <div slot="svelte">
      <SinppetsSvelte name={name} client:idle />
    </div>
  </FrameworkLayout>

  <div class="mt-0!" slot="code">
    <CodeGroup
      client:only="vue"
      files={codeFiles}
    />
  </div>
</Preview>

<style>
  /* 增加一些全局样式以支持代码展示 */
  :global(.code-preview-wrapper) {
    position: relative;
  }

  /* 处理代码高亮时的错误提示 */
  :global(.code-preview-wrapper .error-message) {
    color: #ff5555;
    background-color: rgba(255, 85, 85, 0.1);
    border-left: 3px solid #ff5555;
    padding: 0.5rem 1rem;
    margin: 0.5rem 0;
    font-size: 0.9rem;
    border-radius: 0 0.25rem 0.25rem 0;
  }
</style>
