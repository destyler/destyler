// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`given default ScrollArea > on hover > should render scrollbar 1`] = `
"<div dir="ltr" style="position: relative; --destyler-scroll-area-corner-width: 0px; --destyler-scroll-area-corner-height: 0px; width: 200px; height: 200px; overflow: hidden;">
  <div style="width: 100%; height: 100%; overflow-x: hidden; overflow-y: scroll;" data-destyler-scroll-area-viewport="" tabindex="0">
    <div>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
    </div>
  </div>
  <style>
    /* Hide scrollbars cross-browser and enable momentum scroll for touch
          devices */
    [data-destyler-scroll-area-viewport] {
      scrollbar-width: none;
      -ms-overflow-style: none;
      -webkit-overflow-scrolling: touch;
    }

    [data-destyler-scroll-area-viewport]::-webkit-scrollbar {
      display: none;
    }
  </style>
  <div style="position: absolute; top: 0px; right: 0px; --destyler_scroll_area_thumb_height: 18px;" data-scrollbarimpl="" data-orientation="vertical" data-state="visible">
    <div data-state="visible">
      <!---->
    </div>
  </div>
  <!---->
</div>"
`;

exports[`given default ScrollArea > should render content, but not scrollbar 1`] = `
"<div dir="ltr" style="position: relative; --destyler-scroll-area-corner-width: 0px; --destyler-scroll-area-corner-height: 0px; width: 200px; height: 200px; overflow: hidden;">
  <div style="width: 100%; height: 100%; overflow-x: hidden; overflow-y: scroll;" data-destyler-scroll-area-viewport="" tabindex="0">
    <div>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
    </div>
  </div>
  <style>
    /* Hide scrollbars cross-browser and enable momentum scroll for touch
          devices */
    [data-destyler-scroll-area-viewport] {
      scrollbar-width: none;
      -ms-overflow-style: none;
      -webkit-overflow-scrolling: touch;
    }

    [data-destyler-scroll-area-viewport]::-webkit-scrollbar {
      display: none;
    }
  </style>
  <!---->
  <!---->
</div>"
`;

exports[`given prop:type="always" ScrollArea > should render content and scrollbar 1`] = `
"<div dir="ltr" style="position: relative; --destyler-scroll-area-corner-width: 0px; --destyler-scroll-area-corner-height: 0px; width: 200px; height: 200px; overflow: hidden;">
  <div style="width: 100%; height: 100%; overflow-x: hidden; overflow-y: scroll;" data-destyler-scroll-area-viewport="" tabindex="0">
    <div>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
    </div>
  </div>
  <style>
    /* Hide scrollbars cross-browser and enable momentum scroll for touch
          devices */
    [data-destyler-scroll-area-viewport] {
      scrollbar-width: none;
      -ms-overflow-style: none;
      -webkit-overflow-scrolling: touch;
    }

    [data-destyler-scroll-area-viewport]::-webkit-scrollbar {
      display: none;
    }
  </style>
  <div style="position: absolute; top: 0px; right: 0px; --destyler_scroll_area_thumb_height: 18px;" data-scrollbarimpl="" data-orientation="vertical" forcemount="false" data-state="visible">
    <div data-state="visible">
      <!---->
    </div>
  </div>
  <!---->
</div>"
`;

exports[`given prop:type="scroll" ScrollArea > should render content and scrollbar 1`] = `
"<div dir="ltr" style="position: relative; --destyler-scroll-area-corner-width: 0px; --destyler-scroll-area-corner-height: 0px; width: 200px; height: 200px; overflow: hidden;">
  <div style="width: 100%; height: 100%; overflow-x: hidden; overflow-y: scroll;" data-destyler-scroll-area-viewport="" tabindex="0">
    <div>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
      <p style="width: 50px;"> If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these. If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue. Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue "The Progressive Framework": it's a framework that can grow with you and adapt to your needs. </p>
    </div>
  </div>
  <style>
    /* Hide scrollbars cross-browser and enable momentum scroll for touch
          devices */
    [data-destyler-scroll-area-viewport] {
      scrollbar-width: none;
      -ms-overflow-style: none;
      -webkit-overflow-scrolling: touch;
    }

    [data-destyler-scroll-area-viewport]::-webkit-scrollbar {
      display: none;
    }
  </style>
  <!---->
  <!---->
</div>"
`;
